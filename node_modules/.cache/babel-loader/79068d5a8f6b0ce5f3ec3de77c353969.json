{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!'\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text'\n}];\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer: (state, action) => {\n        state.push(action.payload);\n      },\n      prepare: (title, content) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            meta: 'Additional information'\n          }\n        };\n      }\n    },\n    postUpdated: (state, action) => {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id = id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","nanoid","initialState","id","title","content","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","meta","postUpdated","existingPost","find","post","actions"],"sources":["/Users/ozge/Desktop/social-media-app/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\n\nconst initialState = [\n  { id: '1', title: 'First Post!', content: 'Hello!' },\n  { id: '2', title: 'Second Post', content: 'More text' },\n]\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer: (state, action) => {\n        state.push(action.payload)\n      },\n      prepare: (title, content) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            meta: 'Additional information',\n          },\n        }\n      },\n    },\n    postUpdated: (state, action) => {\n      const { id, title, content } = action.payload\n      const existingPost = state.find((post) => (post.id = id))\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n})\n\nexport const { postAdded, postUpdated } = postsSlice.actions\n\nexport default postsSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AAEA,MAAMC,YAAY,GAAG,CACnB;EAAEC,EAAE,EAAE,GAAN;EAAWC,KAAK,EAAE,aAAlB;EAAiCC,OAAO,EAAE;AAA1C,CADmB,EAEnB;EAAEF,EAAE,EAAE,GAAN;EAAWC,KAAK,EAAE,aAAlB;EAAiCC,OAAO,EAAE;AAA1C,CAFmB,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAGN,WAAW,CAAC;EACpCO,IAAI,EAAE,OAD8B;EAEpCL,YAFoC;EAGpCM,QAAQ,EAAE;IACRC,SAAS,EAAE;MACTC,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;QAC1BD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;MACD,CAHQ;MAITC,OAAO,EAAE,CAACX,KAAD,EAAQC,OAAR,KAAoB;QAC3B,OAAO;UACLS,OAAO,EAAE;YACPX,EAAE,EAAEF,MAAM,EADH;YAEPG,KAFO;YAGPC,OAHO;YAIPW,IAAI,EAAE;UAJC;QADJ,CAAP;MAQD;IAbQ,CADH;IAgBRC,WAAW,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;MAC9B,MAAM;QAAET,EAAF;QAAMC,KAAN;QAAaC;MAAb,IAAyBO,MAAM,CAACE,OAAtC;MACA,MAAMI,YAAY,GAAGP,KAAK,CAACQ,IAAN,CAAYC,IAAD,IAAWA,IAAI,CAACjB,EAAL,GAAUA,EAAhC,CAArB;;MACA,IAAIe,YAAJ,EAAkB;QAChBA,YAAY,CAACd,KAAb,GAAqBA,KAArB;QACAc,YAAY,CAACb,OAAb,GAAuBA,OAAvB;MACD;IACF;EAvBO;AAH0B,CAAD,CAA9B;AA8BP,OAAO,MAAM;EAAEI,SAAF;EAAaQ;AAAb,IAA6BX,UAAU,CAACe,OAA9C;AAEP,eAAef,UAAU,CAACI,OAA1B"},"metadata":{},"sourceType":"module"}