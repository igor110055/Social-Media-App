{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nconst initialState = {\n  posts: [],\n  loading: true\n};\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n\n    postAdded: {\n      reducer: (state, action) => {\n        state.posts.push(action.payload);\n      },\n      prepare: (title, content, userId) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            user: userId,\n            date: new Date().toISOString(),\n            meta: 'Additional information',\n            error: false\n          }\n        };\n      }\n    },\n    postUpdated: (state, action) => {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id = id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  }\n});\nexport const {\n  reactionAdded,\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllPosts = state => state.posts;\nexport const selectPostById = (state, postId) => state.posts.find(post => post.id === postId);","map":{"version":3,"names":["createSlice","nanoid","initialState","posts","loading","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","find","post","id","reactions","postAdded","reducer","push","prepare","title","content","userId","user","date","Date","toISOString","meta","error","postUpdated","actions","selectAllPosts","selectPostById"],"sources":["/Users/ozge/Desktop/social-media-app/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\n\nconst initialState = {\n  posts: [],\n  loading: true,\n}\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.posts.find((post) => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postAdded: {\n      reducer: (state, action) => {\n        state.posts.push(action.payload)\n      },\n      prepare: (title, content, userId) => {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            user: userId,\n            date: new Date().toISOString(),\n            meta: 'Additional information',\n            error: false,\n          },\n        }\n      },\n    },\n    postUpdated: (state, action) => {\n      const { id, title, content } = action.payload\n      const existingPost = state.posts.find((post) => (post.id = id))\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n})\n\nexport const { reactionAdded, postAdded, postUpdated } = postsSlice.actions\n\nexport default postsSlice.reducer\n\nexport const selectAllPosts = (state) => state.posts\n\nexport const selectPostById = (state, postId) =>\n  state.posts.find((post) => post.id === postId)\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EADY;EAEnBC,OAAO,EAAE;AAFU,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAGL,WAAW,CAAC;EACpCM,IAAI,EAAE,OAD8B;EAEpCJ,YAFoC;EAGpCK,QAAQ,EAAE;IACRC,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;MAC3B,MAAM;QAAEC,MAAF;QAAUC;MAAV,IAAuBF,MAAM,CAACG,OAApC;MACA,MAAMC,YAAY,GAAGL,KAAK,CAACN,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,MAAvC,CAArB;;MACA,IAAIG,YAAJ,EAAkB;QAChBA,YAAY,CAACI,SAAb,CAAuBN,QAAvB;MACD;IACF,CAPO;;IAQRO,SAAS,EAAE;MACTC,OAAO,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;QAC1BD,KAAK,CAACN,KAAN,CAAYkB,IAAZ,CAAiBX,MAAM,CAACG,OAAxB;MACD,CAHQ;MAITS,OAAO,EAAE,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,KAA4B;QACnC,OAAO;UACLZ,OAAO,EAAE;YACPI,EAAE,EAAEhB,MAAM,EADH;YAEPsB,KAFO;YAGPC,OAHO;YAIPE,IAAI,EAAED,MAJC;YAKPE,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EALC;YAMPC,IAAI,EAAE,wBANC;YAOPC,KAAK,EAAE;UAPA;QADJ,CAAP;MAWD;IAhBQ,CARH;IA0BRC,WAAW,EAAE,CAACvB,KAAD,EAAQC,MAAR,KAAmB;MAC9B,MAAM;QAAEO,EAAF;QAAMM,KAAN;QAAaC;MAAb,IAAyBd,MAAM,CAACG,OAAtC;MACA,MAAMC,YAAY,GAAGL,KAAK,CAACN,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAWA,IAAI,CAACC,EAAL,GAAUA,EAAtC,CAArB;;MACA,IAAIH,YAAJ,EAAkB;QAChBA,YAAY,CAACS,KAAb,GAAqBA,KAArB;QACAT,YAAY,CAACU,OAAb,GAAuBA,OAAvB;MACD;IACF;EAjCO;AAH0B,CAAD,CAA9B;AAwCP,OAAO,MAAM;EAAEhB,aAAF;EAAiBW,SAAjB;EAA4Ba;AAA5B,IAA4C3B,UAAU,CAAC4B,OAA7D;AAEP,eAAe5B,UAAU,CAACe,OAA1B;AAEA,OAAO,MAAMc,cAAc,GAAIzB,KAAD,IAAWA,KAAK,CAACN,KAAxC;AAEP,OAAO,MAAMgC,cAAc,GAAG,CAAC1B,KAAD,EAAQE,MAAR,KAC5BF,KAAK,CAACN,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,MAAvC,CADK"},"metadata":{},"sourceType":"module"}